apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "chart.name" . }}
    helm.sh/chart: {{ include "chart.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "chart.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      {{- range $key, $value := .Values.podLabels }}
      {{   $key }}: {{ $value | quote }}
      {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "chart.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- range $key, $value := .Values.podLabels }}
        {{   $key }}: {{ $value | quote }}
        {{- end }}
      annotations:
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}        
    spec:
      {{- if .Values.hostAliases }}
      hostAliases:
        {{ toYaml .Values.hostAliases | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: KAFKA_BROKERCONNECT
              value: "{{ .Values.kafka.brokerConnect }}"
            - name: KAFKA_PROPERTIES
              value: "{{ .Values.kafka.properties }}"
            - name: KAFKA_TRUSTSTORE
              value: "{{ .Values.kafka.truststore }}"
            - name: KAFKA_KEYSTORE
              value: "{{ .Values.kafka.keystore }}"
            - name: JVM_OPTS
              value: "{{ .Values.jvm.opts }}"
            - name: JMX_PORT
              value: "{{ .Values.jmx.port }}"
            - name: HOST
              value: "{{ .Values.host }}"
            - name: SERVER_SERVLET_CONTEXTPATH
              value: "{{ .Values.server.servlet.contextPath | trimSuffix "/" }}"
            - name: KAFKA_PROPERTIES_FILE
              value: "/tmp/properties/kafka.properties"
            - name: KAFKA_TRUSTSTORE_FILE
              value: "{{ .Values.kafka.truststoreFile }}"
            - name: KAFKA_KEYSTORE_FILE
              value: "{{ .Values.kafka.keystoreFile }}"
            - name: SERVER_PORT
              value: "{{ .Values.server.port }}"
            - name: CMD_ARGS
              value: "{{ .Values.cmdArgs }}"
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: "{{ .Values.server.servlet.contextPath | trimSuffix "/" }}/actuator/health"
              port: http
            initialDelaySeconds: 180
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: "{{ .Values.server.servlet.contextPath | trimSuffix "/" }}/actuator/health"
              port: http
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 10
          {{- if .Values.kafka.ssl.enable }}
          volumeMounts:
            - mountPath: "/tmp/stores"
              name: secret-store
            - mountPath: "/tmp/properties"
              name: kafka-properties
          {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- if .Values.kafka.ssl.enable }}
      volumes:
        - name: secret-store
          secret:
            secretName: {{.Values.kafka.ssl.secretName }}
        - name: kafka-properties
          secret:
            secretName: {{ include "chart.fullname" . }}-properties
      {{- end }}


